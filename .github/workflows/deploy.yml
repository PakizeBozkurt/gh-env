name: Deployment
on:
  push:
    branches:
      - main
      - dev
env:
  MONGODB_DB_NAME: gha-node
jobs:
  test:
    environment: testing
    env:
      MONGODB_CLUSTER_ADDRESS: gh-node.x2qkwdm.mongodb.net
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      PORT: 9090
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-deps-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: ${{ env.MONGODB_USERNAME }}"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: ${{ env.MONGODB_USERNAME }}"
          echo "MONGODB_DB_NAME: ${{ env.MONGODB_DB_NAME }}


# A configuration file for a deployment process, likely used in a continuous integration/continuous deployment (CI/CD) pipeline. 

# The code starts by specifying the name of the deployment as "Deployment".

#The on section defines the triggers for this deployment. 
#In this case, it is triggered on a push event to the "main" or "dev" branches of the repository.

#The env section sets environment variables that will be used in the deployment process. 
#Here, it defines a variable called MONGODB_DB_NAME with the value "gha-node".

#The code defines a job called "test" which represents a set of tasks to be executed. 
#This job will run in an environment named "testing" and has its own set of environment variables specified in the env section. 
#These variables include MONGODB_CLUSTER_ADDRESS, MONGODB_USERNAME, MONGODB_PASSWORD, and PORT. 
#The values for MONGODB_USERNAME and MONGODB_PASSWORD are fetched from secrets.

#The job runs on an "ubuntu-latest" machine.

#The steps section contains a list of tasks to be executed within the job. 
#These tasks are executed sequentially.

#The first step is to "Get Code" using the actions/checkout@v3 action, which retrieves the source code from the repository.

#The second step is to "Cache dependencies" using the actions/cache@v3 action. 
#This step caches the dependencies of the project, specifically the NPM packages, to speed up future builds.

#The third step is to "Install dependencies" using the npm ci command, which installs the project dependencies based on the package-lock.json file.